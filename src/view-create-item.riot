<view-create-item>
  <b>Create a new Item:</b>
  <form class="pure-form pure-form-aligned">
    <fieldset>
      <div class="pure-control-group">
        <label for="aligned-slot">Slot</label>
        <select id="aligned-slot">
          <option value="0">Head</option>
          <option value="1">Chest</option>
          <option value="2">Arms</option>
          <option value="3">Pants</option>
          <option value="4">Shoes</option>
        </select>
      </div>
      <div class="pure-control-group">
        <label for="aligned-attack">Name</label>
        <input type="text" id="aligned-name" placeholder="Itemname" />
      </div>
      <div class="pure-control-group">
        <label for="aligned-attack">Attack</label>
        <input type="number" id="aligned-attack" placeholder="0" />
      </div>
      <div class="pure-control-group">
        <label for="aligned-defense">Defense</label>
        <input type="number" id="aligned-defense" placeholder="0" />
      </div>
      <div class="pure-control-group">
        <label for="aligned-health">Health</label>
        <input type="number" id="aligned-health" placeholder="0" />
      </div>
      <div class="pure-control-group">
        <label for="aligned-price">Shop Price</label>
        <input type="number" id="aligned-price" placeholder="0" />
        <span style="display:block;text-align:center">
            If the price is 0 the item will not be available in the shop
          </span>
      </div>
      <div class="pure-controls">
        <button type="submit" class="pure-button pure-button-primary" onclick={createNewItem}>
          Submit
        </button>
      </div>
    </fieldset>
  </form>
  <b>All Items:<small style="padding-left:.5em">({state.items.length})</small></b>
  <table class="pure-table">
    <thead>
    <tr>
      <th>#</th>
      <th>Name</th>
      <th>Slot</th>
      <th>Attack</th>
      <th>Defense</th>
      <th>Health</th>
      <th>Shop Item</th>
      <th>Shop Price</th>
    </tr>
    </thead>
    <tbody>
    <tr each={item in state.items}>
      <td>{item.id}</td>
      <td>{item.name}</td>
      <td>{item.slot}</td>
      <td>{item.attack.toString()}</td>
      <td>{item.defense.toString()}</td>
      <td>{item.health.toString()}</td>
      <td>{item.isShop}</td>
      <td>{item.price.toString()}</td>
    </tr>
    </tbody>
  </table>

  <script>
    import {GameContractService} from "./service";
    const game = new GameContractService()

    export default {
      state: {},

      onBeforeMount() {
        this.state = {
          items: game.getAllItems(),
        }

        game.events.on('ItemCreated', this.onItemCreated)
      },

      onItemCreated(event) {
        this.update({
          items: game.getAllItems()
        })
      },

      onBeforeUnmount() {
        game.events.off('ItemCreated', this.onItemCreated)
      },

      createNewItem(e) {
        e.preventDefault()
        const item = {
          slot: this.$('#aligned-slot').value,
          attack: this.$('#aligned-attack').value,
          defense: this.$('#aligned-defense').value,
          health: this.$('#aligned-health').value,
          isShop: null,
          price: this.$('#aligned-price').value,
          name: this.$('#aligned-name').value
        }

        if (item.price > 0)
          item.isShop = true

        game.createItem(item)
      },
    }
  </script>
  <style>
    .pure-control-group label {
      vertical-align: super!important;
    }
    .pure-control-group input {
      width: initial!important;
    }
    table {
      color: #333;
    }
  </style>
</view-create-item>