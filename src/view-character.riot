<view-character>
  <h3>Your Character:<small style="font-size:60%;color:#AAA;padding-left:1em;vertical-align:middle">({state.address})</small></h3>
  <div class="pure-g">
    <div class="pure-u-1-2"><b>Action Points (AP):</b></div>
    <div class="pure-u-1-2"><b>{state.ap}<small style="padding-left:.5em;color:darkgreen;vertical-align:bottom">+{state.openAP}</small></b></div>
    <div class="pure-u-1-2">
      <div class="pure-u-5-5"><b>Stats:</b></div>
      <div class="pure-u-2-5">Health:</div><div class="pure-u-2-5">{state.health}</div>
      <div class="pure-u-2-5">Attack:</div><div class="pure-u-2-5">{state.attack}</div>
      <div class="pure-u-2-5">Defense:</div><div class="pure-u-2-5">{state.defense}</div>
      <div class="pure-u-2-5">Wins:</div><div class="pure-u-2-5">{state.wins}</div>
      <div class="pure-u-2-5">Losses:</div><div class="pure-u-2-5">{state.losses}</div>
    </div>
    <div class="pure-u-1-2">
      <div class="pure-u-5-5"><b>Equipment:</b></div>
      <div class="pure-u-2-5">Head:</div><div class="pure-u-2-5">{itemName(state.armorHead)}</div>
      <div class="pure-u-2-5">Chest:</div><div class="pure-u-2-5">{itemName(state.armorChest)}</div>
      <div class="pure-u-2-5">Arms:</div><div class="pure-u-2-5">{itemName(state.armorArms)}</div>
      <div class="pure-u-2-5">Pants:</div><div class="pure-u-2-5">{itemName(state.armorPants)}</div>
      <div class="pure-u-2-5">Shoes:</div><div class="pure-u-2-5">{itemName(state.armorShoes)}</div>
    </div>
  </div>

  <div class="pure-g" style="padding-top:2em;padding-bottom:2em">
    <div class="pure-g pure-u-1 pure-u-md-1-1">
      <div class="pure-u-1 pure-u-md-1-1" style="display:flex;justify-content:center;align-content:center">
        <button class="pure-button" onclick={onRefreshAP}>Refresh AP</button>
      </div>
    </div>
  </div>


  <script>
    import {GameContractService} from "./service";
    const game = new GameContractService()

    export default {
      refreshTimer: null,
      state: {},

      itemName(item) {
        return game.getItemName(item)
      },

      onBeforeMount() {
        this.state = {
          address: game.self(),
          ap: game.actionPoints(),
          openAP: game.getNotClaimedActionPoints(),

          health: game.getHealthOfSelf(),
          attack: game.getAttackOfSelf(),
          defense: game.getDefenseOfSelf(),

          armorHead: game.getArmorHeadSelf(),
          armorChest: game.getArmorChestSelf(),
          armorArms: game.getArmorArmsSelf(),
          armorPants: game.getArmorPantsSelf(),
          armorShoes: game.getArmorShoesSelf(),

          wins: game.getWinsSelf(),
          losses: game.getLossesSelf()
        }
      },

      onMounted() {
        this.props.observable.on('InventoryChanged', this.onInventoryChanged)
        this.props.observable.on('APConsumed', this.onAPConsumed)
        game.events.on('FightWon', this.onFight)
        game.events.on('FightLost', this.onFight)

        this.refreshTimer = window.setInterval(() => {
          this.update({
            openAP: game.getNotClaimedActionPoints()
          })
        }, 1000)
      },

      onInventoryChanged() {
        this.update({
          health: game.getHealthOfSelf(),
          attack: game.getAttackOfSelf(),
          defense: game.getDefenseOfSelf(),

          armorHead: game.getArmorHeadSelf(),
          armorChest: game.getArmorChestSelf(),
          armorArms: game.getArmorArmsSelf(),
          armorPants: game.getArmorPantsSelf(),
          armorShoes: game.getArmorShoesSelf()
        })
      },

      onFight(event) {
        console.log(event)
        console.log(game.self())
        if (event.attacker === game.self()) {
          this.update({
            wins: game.getWinsSelf(),
            losses: game.getLossesSelf()
          })
        }
      },

      onAPConsumed() {
        this.update({
          ap: game.actionPoints()
        })
      },

      onBeforeUnmount() {
        this.props.observable.off('InventoryChanged', this.onInventoryChanged)
        this.props.observable.off('APConsumed', this.onAPConsumed)
        game.events.off('FightWon', this.onFight)
        game.events.off('FightLost', this.onFight)

        window.clearInterval(this.refreshTimer)
      },

      onRefreshAP(event) {
        game.refreshAP().then((tx) => {
          this.update({
            ap: game.actionPoints(),
            openAP: game.getNotClaimedActionPoints(),
          })
        })
      }

    }

  </script>
  <style>
    view-character {
      color: #333;
    }
  </style>
</view-character>