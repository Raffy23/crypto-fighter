<view-shop>
  <h3>Shop:<small style="padding-left:1em">(Balance: {state.token.amount} {state.token.name})</small></h3>
  <form class="pure-form">
    <fieldset>
      <div class="pure-g">
        <div class="pure-u-1-1">1 Token = {state.token.wei} Wei</div>
        <div class="pure-u-2-3" style="padding-right:1em"><input id="shop-tokens" type="number" placeholder="0"/></div>
        <div class="pure-u-1-3"><button type="submit" class="pure-button pure-button-primary" onclick={buyTokens}>Buy Tokens</button></div>
      </div>
    </fieldset>
  </form>
  <b>All Items:<small style="padding-left:.5em">({state.items.length})</small></b>
  <table class="pure-table">
    <thead>
    <tr>
      <th>#</th>
      <th>Slot</th>
      <th>Attack</th>
      <th>Defense</th>
      <th>Health</th>
      <th>Price</th>
      <th></th>
    </tr>
    </thead>
    <tbody>
    <tr each={item in state.items}>
      <td>{item.id}</td>
      <td>{item.slot}</td>
      <td>{item.attack.toString()}</td>
      <td>{item.defense.toString()}</td>
      <td>{item.health.toString()}</td>
      <td>{item.price.toString()}</td>
      <td><a href="#" onclick={buy(item)}>Buy</a></td>
    </tr>
    </tbody>
  </table>

  <script>
    import {GameContractService} from "./service";
    const game = new GameContractService()

    export default {

      state: {
        token: {
          name: "",
          amount: 0,
          wei: 0
        },

        items: []
      },

      onBeforeMount() {
        this.state = {
          token: {
            name: game.tokenName(),
            amount: game.tokenBalanceOfSelf(),
            wei: game.tokenPrice()
          },

          items: game.getAllItems().filter(item => item.isShop)
        }

        game.events.on('TokenPriceChanged', this.onTokenPriceChanged)
        game.events.on('Transfer', this.onTokenTransfer)
        game.events.on('ItemCreated', this.onItemCreated)
      },

      onTokenPriceChanged(event) {
        console.log('onTokenPriceChanged: ', event)
        this.update({
          token: {...this.state.token, wei: event.price}
        })
      },

      onTokenTransfer(event) {
        console.log('onTokenTransfer: ', event)

        if ((event.from === game.gameAddress() && event.to === game.self())
            || (event.to === game.gameAddress() && event.from === game.self()))
          this.update({token: {...this.state.token, amount: game.tokenBalanceOfSelf()}})
      },

      onItemCreated(event) {
        this.update({
          items: game.getAllItems().filter(item => item.isShop)
        })
      },

      onBeforeUnmount() {
        game.events.off('TokenPriceChanged', this.onTokenPriceChanged)
        game.events.off('Transfer', this.onTokenTransfer)
        game.events.off('ItemCreated', this.onItemCreated)
      },

      buy(item) {
        return (event) => {
          event.preventDefault()
          if (this.state.token.amount.toNumber() < item.price) {
            console.log(this.state.token.amount)
            alert("Not enough tokens!")
            return
          }

          game.buyItem(item)
        }
      },

      buyTokens(event) {
        event.preventDefault()
        game.buyTokens(this.$('#shop-tokens').value)
      }

    }
  </script>

</view-shop>